/**
 * ÁéØÂ¢ÉÈÖçÁΩÆ
 * Áªü‰∏ÄÁÆ°ÁêÜÂ∫îÁî®ÁöÑÁéØÂ¢ÉÂèòÈáèÂíåÈÖçÁΩÆ
 */

/**
 * Â∫îÁî®ÈÖçÁΩÆÊé•Âè£
 */
interface AppConfig {
  // Â∫îÁî®‰ø°ÊÅØ
  name: string;
  version: string;
  
  // ÁéØÂ¢É‰ø°ÊÅØ
  isDevelopment: boolean;
  isProduction: boolean;
  
  // APIÈÖçÁΩÆ
  api: {
    baiduTranslateUrl: string;
    proxyApiUrl: string;
    timeout: number;
    maxRetries: number;
  };
  
  // ÈªòËÆ§Âá≠ÊçÆÈÖçÁΩÆ
  defaultCredentials: {
    appid: string;
    apiKey: string;
  };
  
  // ÂäüËÉΩÂºÄÂÖ≥
  features: {
    enablePerformanceMonitoring: boolean;
    enableErrorReporting: boolean;
    enableDebugMode: boolean;
  };
  
  // ÈôêÂà∂ÈÖçÁΩÆ
  limits: {
    maxTextLength: number;
    maxFileSize: number;
    requestTimeout: number;
  };
}

/**
 * Ëé∑ÂèñÂ∫îÁî®ÈÖçÁΩÆ
 */
export const config: AppConfig = {
  name: 'TranslationTools',
  version: '1.0.0',
  
  isDevelopment: import.meta.env.DEV,
  isProduction: import.meta.env.PROD,
  
  api: {
    baiduTranslateUrl: 'https://api.fanyi.baidu.com/api/trans/vip/translate',
    proxyApiUrl: import.meta.env.VITE_PROXY_API_URL || 'http://localhost:4500/api/translation/translate',
    timeout: 10000, // 10Áßí
    maxRetries: 3,
  },
  
  defaultCredentials: {
    appid: import.meta.env.VITE_DEFAULT_APPID || '',
    apiKey: import.meta.env.VITE_DEFAULT_API_KEY || '',
  },
  
  features: {
    enablePerformanceMonitoring: import.meta.env.DEV,
    enableErrorReporting: import.meta.env.PROD,
    enableDebugMode: import.meta.env.DEV,
  },
  
  limits: {
    maxTextLength: 6000, // ÁôæÂ∫¶ÁøªËØëAPIÈôêÂà∂
    maxFileSize: 1024 * 1024, // 1MB
    requestTimeout: 10000, // 10Áßí
  },
};

/**
 * Ëé∑ÂèñÁéØÂ¢ÉÂèòÈáè
 * @param key ÁéØÂ¢ÉÂèòÈáèÈîÆÂêç
 * @param defaultValue ÈªòËÆ§ÂÄº
 * @returns ÁéØÂ¢ÉÂèòÈáèÂÄº
 */
export function getEnvVar(key: string, defaultValue?: string): string | undefined {
  return import.meta.env[key] || defaultValue;
}

/**
 * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÂºÄÂèëÁéØÂ¢É
 */
export const isDev = config.isDevelopment;

/**
 * Ê£ÄÊü•ÊòØÂê¶‰∏∫Áîü‰∫ßÁéØÂ¢É
 */
export const isProd = config.isProduction;

/**
 * Êó•ÂøóÂ∑•ÂÖ∑
 */
export const logger = {
  debug: (...args: unknown[]) => {
    if (config.features.enableDebugMode) {
      console.log('üêõ [DEBUG]', ...args);
    }
  },
  
  info: (...args: unknown[]) => {
    if (config.features.enableDebugMode) {
      console.info('‚ÑπÔ∏è [INFO]', ...args);
    }
  },
  
  warn: (...args: unknown[]) => {
    console.warn('‚ö†Ô∏è [WARN]', ...args);
  },
  
  error: (...args: unknown[]) => {
    console.error('‚ùå [ERROR]', ...args);
  },
};

export default config;
